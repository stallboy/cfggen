//import gg.jte.ContentType

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
//    id 'gg.jte.gradle' version '3.2.1'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    // https://mvnrepository.com/artifact/org.mockito/mockito-inline
    testImplementation 'org.mockito:mockito-inline:5.2.0'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:5.12.0'

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"

    implementation 'org.antlr:antlr4-runtime:4.13.1'
    // https://mvnrepository.com/artifact/org.dhatim/fastexcel-reader
    implementation 'org.dhatim:fastexcel-reader:0.19.0'

    implementation 'org.dhatim:fastexcel:0.19.0'

    implementation 'de.siegmar:fastcsv:2.2.2'
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.43'

    // https://mvnrepository.com/artifact/io.github.sashirestela/simple-openai
    implementation 'io.github.sashirestela:simple-openai:3.8.2'

    implementation("gg.jte:jte:3.2.1")

    if (!project.hasProperty("noPoi")) {
        // 以下两个库只用于-checkcomma，可以不要，这样打出来的fatjar从20M会下降到2M
        implementation 'org.apache.poi:poi:5.4.1'
        implementation 'org.apache.poi:poi-ooxml:5.4.1'
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

//jte {
//    contentType = ContentType.Plain
//    precompile()
//}

//sourceSets.main.java.srcDirs += 'jte-classes'

compileJava {
    if (project.hasProperty("noPoi")) {
        sourceSets.main.java.exclude("configgen/data/ReadByPoi.java")
    }
    options.encoding = "UTF-8"
}

compileTestJava {
    options.encoding = "UTF-8"
}

jar {
//    dependsOn precompileJte
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // 忽略重复文件
//    from fileTree("jte-classes") {
//        include "**/*.class"
//        include "**/*.bin" // Only required if you use binary templates
//    }

    manifest {
        attributes 'Main-Class': 'configgen.gen.Main'
    }
}

tasks.register('fatJar', Jar) {
    archiveFileName = 'configgen.jar'
    manifest.from jar.manifest
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

application {
    mainClass = 'configgen.gen.Main'
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        csv.required = true
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
