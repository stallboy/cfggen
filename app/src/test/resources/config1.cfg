struct LevelRank {
	Level:int; // 等级
	Rank:int ->equip.rank; // 品质
}

struct Position (sep=';') {
	x:int;
	y:int;
	z:int;
}

struct Range {
	Min:int; // 最小
	Max:int; // 最大
}

table ai.ai[ID] {
	ID:int;
	Desc:str; // 描述----这里测试下多行效果--再来一行
	CondID:str; // 触发公式
	TrigTick:int; // 触发间隔(帧)
	TrigOdds:int; // 触发几率
	ActionID:str; // 触发行为
	DeathRemove:bool; // 死亡移除
}

table ai.ai_action[ID] {
	ID:int;
	Desc:str; // 描述
	FormulaID:int; // 公式
	ArgIList:list<int> (fix=6); // 参数(int)1
	ArgSList:list<int> (fix=3); // 参数(string)1
}

table ai.ai_condition[ID] {
	ID:int;
	Desc:str; // 描述
	FormulaID:int; // 公式
	ArgIList:list<int> (fix=6); // 参数(int)1
	ArgSList:list<int> (fix=3); // 参数(string)1
}

struct equip.TestPackBean {
	name:str;
	range:Range;
}

table equip.ability[id] (enum='name') {
	id:int; // 属性类型
	name:str; // 程序用名字
}

table equip.equipconfig[entry] (entry='entry', columnMode) {
	entry:str; // 入口，程序填
	stone_count_for_set:int; // 形成套装的音石数量
	draw_protect_name:str; // 保底策略名称
	broadcastid:int; // 公告Id
	broadcast_least_quality:int; // 公告的最低品质
	week_reward_mailid:int; // 抽卡周奖励的邮件id
}

table equip.jewelry[ID] (extraSplit=40) {
	ID:int; // 首饰ID
	Name:str; // 首饰名称
	IconFile:str; // 图标ID
	LvlRank:LevelRank ->equip.jewelryrandom; // 首饰等级
	Type:str ->equip.jewelrytype; // 首饰类型
	SuitID:int ->equip.jewelrysuit (nullable); // 套装ID（为0是没有不属于套装，首饰品级为4的首饰该参数为套装id，其余情况为0,引用JewelrySuit.csv）
	KeyAbility:int ->equip.ability; // 关键属性类型
	KeyAbilityValue:int; // 关键属性数值
	SalePrice:int; // 售卖价格
	Description:str; // 描述,根据Lvl和Rank来随机3个属性，第一个属性由Lvl,Rank行随机，剩下2个由Lvl和小于Rank的行里随机。Rank最小的时候都从Lvl，Rank里随机。
}

table equip.jewelryrandom[LvlRank] {
	LvlRank:LevelRank; // 等级
	AttackRange:Range; // 最小攻击力
	OtherRange:list<Range> (fix=4); // 最小防御力
	TestPack:list<TestPackBean> (pack); // 测试pack
}

table equip.jewelrysuit[SuitID] (entry='Ename') {
	SuitID:int; // 饰品套装ID
	Ename:str;
	Name:text; // 策划用名字
	Ability1:int; // 套装属性类型1（装备套装中的两件时增加的属性）
	Ability1Value:int; // 套装属性1
	Ability2:int; // 套装属性类型2（装备套装中的三件时增加的属性）
	Ability2Value:int; // 套装属性2
	Ability3:int; // 套装属性类型3（装备套装中的四件时增加的属性）
	Ability3Value:int; // 套装属性3
	SuitList:list<int> (fix=4); // 部件1
}

table equip.jewelrytype[TypeName] (enum='TypeName') {
	TypeName:str; // 程序用名字
}

table equip.rank[RankID] (enum='RankName') {
	RankID:int; // 稀有度
	RankName:str; // 程序用名字
	RankShowName:str; // 显示名称
}

struct other.DropItem {
	chance:int; // 掉落概率
	itemids:list<int> (block=1); // 掉落物品
	countmin:int; // 数量下限
	countmax:int; // 数量上限
}

table other.drop[dropid] {
	dropid:int; // 序号
	name:text; // 名字
	items:list<DropItem> (block=1); // 掉落概率
	testmap:map<int,int> (block=1); // 测试map block
}

table other.loot[lootid] {
	lootid:int =>lootitem[lootid]; // 序号
	ename:str;
	name:text; // 名字
	chanceList:list<int> (fix=7); // 掉落0件物品的概率
}

table other.lootitem[lootid,itemid] {
	lootid:int; // 掉落id
	itemid:int; // 掉落物品
	chance:int; // 掉落概率
	countmin:int; // 数量下限
	countmax:int; // 数量上限
}

table other.monster[id] {
	id:int;
	posList:list<Position> (sep=':');
}

table other.signin[id] {
	[id,viplevel];
	id:int; // 礼包ID
	item2countMap:map<int,int> (fix=5); // 普通奖励
	vipitem2vipcountMap:map<int,int> ->loot (fix=2); // vip奖励
	viplevel:int; // 领取vip奖励的最低等级
	IconFile:str; // 礼包图标
}

struct task.TestDefaultBean {
	testInt:int;
	testBool:bool;
	testString:str;
	testSubBean:Position;
	testList:list<int> (pack);
	testList2:list<int> (fix=3);
	testMap:map<int,str> (fix=2);
}

interface task.completecondition (enumRef='completeconditiontype', defaultImpl='TestNoColumn') {
	struct KillMonster {
		monsterid:int ->other.monster;
		count:int;
	}

	struct TalkNpc {
		npcid:int;
	}

	struct TestNoColumn {
	}

	struct Chat {
		msg:str;
	}

	struct ConditionAnd {
		cond1:task.completecondition (pack);
		cond2:task.completecondition (pack);
	}

	struct CollectItem {
		itemid:int;
		count:int;
	}

}

table task.completeconditiontype[id] (enum='name') {
	id:int; // 任务完成条件类型（id的范围为1-100）
	name:str; // 程序用名字
}

table task.task[taskid] {
	taskid:int ->task.taskextraexp (nullable); // 任务完成条件类型（id的范围为1-100）
	name:list<text> (fix=2); // 程序用名字
	nexttask:int ->task (nullable);
	completecondition:task.completecondition;
	exp:int;
	testDefaultBean:TestDefaultBean (pack); // 测试
}

table task.taskextraexp[taskid] {
	taskid:int; // 任务完成条件类型（id的范围为1-100）
	extraexp:int; // 额外奖励经验
}

