struct TestDefaultBean {
	testInt:int;
	testBool:bool;
	testString:str;
	testSubBean:Position;
	testList:list<int> (pack);
	testList2:list<int> (fix=3);
	testMap:map<int,str> (fix=2);
}

interface completecondition (enumRef='completeconditiontype', defaultImpl='TestNoColumn') {
	struct KillMonster {
		monsterid:int ->other.monster;
		count:int;
	}

	struct TalkNpc {
		npcid:int;
	}

	struct TestNoColumn {
	}

	struct Chat {
		msg:str;
	}

	struct ConditionAnd {
		cond1:task.completecondition (pack);
		cond2:task.completecondition (pack);
	}

	struct CollectItem {
		itemid:int;
		count:int;
	}

}

table completeconditiontype[id] (enum='name') {
	id:int; // 任务完成条件类型（id的范围为1-100）
	name:str; // 程序用名字
}

table task[taskid] {
	taskid:int ->task.taskextraexp (nullable); // 任务完成条件类型（id的范围为1-100）
	name:list<text> (fix=2); // 程序用名字
	nexttask:int ->task (nullable);
	completecondition:task.completecondition;
	exp:int;
	testDefaultBean:TestDefaultBean (pack); // 测试
}

table taskextraexp[taskid] {
	taskid:int; // 任务完成条件类型（id的范围为1-100）
	extraexp:int; // 额外奖励经验
	test1:str;
	test2:str;
	fielda:str;
	fieldb:str;
	fieldc:str;
	fieldd:str (noserver);
}

table task2[taskid] (json, description='testString') {
	taskid:int ->task.taskextraexp (nullable); // 任务完成条件类型（id的范围为1-100）
	name:list<text>;
	nexttask:int ->task (nullable);
	completecondition:task.completecondition;
	exp:int;
	testBool:bool;
	testString:str;
	testStruct:Position;
	testList:list<int>;
	testListStruct:list<Position>;
	testListInterface:list<ai.TriggerTick>;
}

